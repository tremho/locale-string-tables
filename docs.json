{"language":"javascript","client_name":"inchjs","args":[],"client_version":"0.4.1","git_repo_url":"","branch_name":"fatal: not a git repository (or any of the parent directories): .git","objects":[{"comment":"/**\n* String Tables are a simple name/value pairing from a JSON file.\n* This can be used as the basis for configuration, localization, or other common mappings.\n*\n* All string table files are relative to the app folder root.\n*/","meta":{"range":[247,2346],"filename":"StringTable.js","lineno":9,"columnno":0,"path":"/src","code":{"id":"astnode100000004","name":"StringTable","type":"ClassDeclaration","paramnames":[]}},"classdesc":"String Tables are a simple name/value pairing from a JSON file.\nThis can be used as the basis for configuration, localization, or other common mappings.\n\nAll string table files are relative to the app folder root.","name":"StringTable","longname":"StringTable","kind":"class","scope":"global","undocumented":true},{"comment":"/**\n* Constructs a new StringTable.\n*/","meta":{"range":[316,355],"filename":"StringTable.js","lineno":13,"columnno":2,"path":"/src","code":{"id":"astnode100000007","name":"StringTable","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Constructs a new StringTable.","name":"StringTable","longname":"StringTable","kind":"class","scope":"global","params":[],"undocumented":true},{"comment":"/**\n* String Tables are a simple name/value pairing from a JSON file.\n* This can be used as the basis for configuration, localization, or other common mappings.\n*\n* All string table files are relative to the app folder root.\n*/","meta":{"range":[247,2346],"filename":"StringTable.js","lineno":9,"columnno":0,"path":"/src","code":{"id":"astnode100000004","name":"StringTable","type":"ClassDeclaration","paramnames":[]}},"name":"StringTable","longname":"StringTable","kind":"class","classdesc":"String Tables are a simple name/value pairing from a JSON file.\nThis can be used as the basis for configuration, localization, or other common mappings.\n\nAll string table files are relative to the app folder root.","scope":"global","description":"Constructs a new StringTable."},{"comment":"/**\n* Returns a string from the string table\n* @param name\n* @returns {string}\n*/","meta":{"range":[455,504],"filename":"StringTable.js","lineno":22,"columnno":2,"path":"/src","code":{"id":"astnode100000017","name":"StringTable#getString","type":"MethodDefinition","paramnames":["name"]},"vars":{"":null}},"description":"Returns a string from the string table","params":[{"name":"name"}],"returns":[{"type":{"names":["string"]}}],"name":"getString","longname":"StringTable#getString","kind":"function","memberof":"StringTable","scope":"instance"},{"comment":"/**\n* Sets the value of a string identifier.\n* @param name\n* @param value\n*/","meta":{"range":[599,656],"filename":"StringTable.js","lineno":31,"columnno":2,"path":"/src","code":{"id":"astnode100000028","name":"StringTable#setString","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets the value of a string identifier.","params":[{"name":"name"},{"name":"value"}],"name":"setString","longname":"StringTable#setString","kind":"function","memberof":"StringTable","scope":"instance"},{"comment":"/**\n* Loads string values from a JSON file on disk.\n* This is an asynchronous non-blocking promise call.\n* @param filePath\n* @param {boolean} [silent] `true` to supress file not found error.  Other errors may still throw.\n* @returns {Promise}\n*/","meta":{"range":[926,1631],"filename":"StringTable.js","lineno":42,"columnno":2,"path":"/src","code":{"id":"astnode100000042","name":"StringTable#load","type":"MethodDefinition","paramnames":["filePath","silent"]},"vars":{"":null}},"description":"Loads string values from a JSON file on disk.\nThis is an asynchronous non-blocking promise call.","params":[{"name":"filePath"},{"type":{"names":["boolean"]},"optional":true,"description":"`true` to supress file not found error.  Other errors may still throw.","name":"silent","defaultvalue":false}],"returns":[{"type":{"names":["Promise"]}}],"name":"load","longname":"StringTable#load","kind":"function","memberof":"StringTable","scope":"instance"},{"comment":"/**\n* Synchronous (blocking) load of a string table file\n* @param filePath\n* @param silent\n*/","meta":{"range":[1743,2344],"filename":"StringTable.js","lineno":71,"columnno":2,"path":"/src","code":{"id":"astnode100000165","name":"StringTable#loadSync","type":"MethodDefinition","paramnames":["filePath","silent"]},"vars":{"":null}},"description":"Synchronous (blocking) load of a string table file","params":[{"name":"filePath"},{"name":"silent","defaultvalue":false}],"name":"loadSync","longname":"StringTable#loadSync","kind":"function","memberof":"StringTable","scope":"instance"},{"comment":"/**\n* @module i18n\n* @description\n* The i18n module is designed to handle internationalization concerns, primarily through the use of string tables\n* that map identifiers to words translated into each language.\n*\n* The string tables are kept within the i18n folder.\n* The i18n folder contains files that hold translation strings in a hierarchy in which\n* any strings in the 'common.json' file are loaded first. These strings are meant to be\n* common across languages and generally are used for default formats, etc.\n*\n* Additionally, regardless of language, the region itself may have a set of common defaults.\n* This optional file is named `common-RG.json` where **RG** is replaced by the locale code.\n*\n* For example, `common-US.json` would hold anything relevant to the US regardless of language, such\n* as currency formats or other civic or regionally specific patterns or configurations.  Generally not words, though,\n* since these are the domain of the language files.\n*\n* Next, the core language file is loaded (eg. 'en.json').  This file contains the translation\n* strings for that language that is the default for all locales.\n*\n* Next, the specific region is loaded (eg. 'en-GB.json') which will add or replace strings\n* with specific translations for the given region.\n*\n*\n* While most identifiers are assigned by the app, some identifiers are pre-set, or use pre-established templates\n* for naming, to coincide with use by the Formatter and for use in i18n supported pluralization.\n*\n* Identifiers beginning with \"formatter.\" are reserved for use by the Formatter in international contexts.\n* These affect formatting numbers, currencies, measure units, and date/time values.\n*\n* Pluralization is handled via suffixes ('.plural', or '.two', '.few', and '.many')\n*\n* Strings themselves are accessed with `getLocaleString`, naming the identifier.  The word for the\n* current language is returned per entry in the table.\n*\n* Strings not found in the table will return as 'decorated fails' in which the identifier is encased\n* in bookended tokens:  \"%$<missing.identifier>$%\"\n*\n* Use the `translateObjectStrings` method for a convenient way to establish a set of localized values.\n*\n* See the docs for all the i18n methods.  All i18n methods are static.\n*\n* TODO: Support indirect reference with @  e.g. \"another.use.of.word\": \"@original.translation.of.word\"\n*\n*/","meta":{"filename":"i18n.js","lineno":3,"columnno":0,"path":"/src","code":{}},"kind":"module","name":"i18n","description":"The i18n module is designed to handle internationalization concerns, primarily through the use of string tables\nthat map identifiers to words translated into each language.\n\nThe string tables are kept within the i18n folder.\nThe i18n folder contains files that hold translation strings in a hierarchy in which\nany strings in the 'common.json' file are loaded first. These strings are meant to be\ncommon across languages and generally are used for default formats, etc.\n\nAdditionally, regardless of language, the region itself may have a set of common defaults.\nThis optional file is named `common-RG.json` where **RG** is replaced by the locale code.\n\nFor example, `common-US.json` would hold anything relevant to the US regardless of language, such\nas currency formats or other civic or regionally specific patterns or configurations.  Generally not words, though,\nsince these are the domain of the language files.\n\nNext, the core language file is loaded (eg. 'en.json').  This file contains the translation\nstrings for that language that is the default for all locales.\n\nNext, the specific region is loaded (eg. 'en-GB.json') which will add or replace strings\nwith specific translations for the given region.\n\n\nWhile most identifiers are assigned by the app, some identifiers are pre-set, or use pre-established templates\nfor naming, to coincide with use by the Formatter and for use in i18n supported pluralization.\n\nIdentifiers beginning with \"formatter.\" are reserved for use by the Formatter in international contexts.\nThese affect formatting numbers, currencies, measure units, and date/time values.\n\nPluralization is handled via suffixes ('.plural', or '.two', '.few', and '.many')\n\nStrings themselves are accessed with `getLocaleString`, naming the identifier.  The word for the\ncurrent language is returned per entry in the table.\n\nStrings not found in the table will return as 'decorated fails' in which the identifier is encased\nin bookended tokens:  \"%$<missing.identifier>$%\"\n\nUse the `translateObjectStrings` method for a convenient way to establish a set of localized values.\n\nSee the docs for all the i18n methods.  All i18n methods are static.\n\nTODO: Support indirect reference with @  e.g. \"another.use.of.word\": \"@original.translation.of.word\"","longname":"module:i18n"},{"comment":"","meta":{"range":[2437,2484],"filename":"i18n.js","lineno":50,"columnno":6,"path":"/src","code":{"id":"astnode100000283","name":"platform","type":"CallExpression","value":""}},"undocumented":true,"name":"platform","longname":"module:i18n~platform","kind":"constant","scope":"inner","memberof":"module:i18n","params":[]},{"comment":"","meta":{"range":[2491,2537],"filename":"i18n.js","lineno":51,"columnno":6,"path":"/src","code":{"id":"astnode100000289","name":"nsfs","type":"CallExpression","value":""}},"undocumented":true,"name":"nsfs","longname":"module:i18n~nsfs","kind":"constant","scope":"inner","memberof":"module:i18n","params":[]},{"comment":"","meta":{"range":[2544,2582],"filename":"i18n.js","lineno":52,"columnno":6,"path":"/src","code":{"id":"astnode100000295","name":"StringTable","type":"CallExpression","value":""}},"undocumented":true,"name":"StringTable","longname":"module:i18n~StringTable","kind":"constant","scope":"inner","memberof":"module:i18n","params":[]},{"comment":"","meta":{"range":[2590,2609],"filename":"i18n.js","lineno":54,"columnno":6,"path":"/src","code":{"id":"astnode100000301","name":"availableLangs","type":"ArrayExpression","value":"[]"}},"undocumented":true,"name":"availableLangs","longname":"module:i18n~availableLangs","kind":"constant","scope":"inner","memberof":"module:i18n","params":[]},{"comment":"","meta":{"range":[2616,2637],"filename":"i18n.js","lineno":55,"columnno":6,"path":"/src","code":{"id":"astnode100000305","name":"availableRegions","type":"ObjectExpression","value":"{}"}},"undocumented":true,"name":"availableRegions","longname":"module:i18n~availableRegions","kind":"constant","scope":"inner","memberof":"module:i18n","params":[]},{"comment":"/**\n* Accesses the system implmentation of the `W3C intl` library, if it exists.\n* @static\n*/","meta":{"range":[2742,2777],"filename":"i18n.js","lineno":61,"columnno":6,"path":"/src","code":{"id":"astnode100000309","name":"intl","type":"CallExpression","value":""}},"description":"Accesses the system implmentation of the `W3C intl` library, if it exists.","scope":"static","name":"intl","longname":"module:i18n.intl","kind":"constant","memberof":"module:i18n","params":[]},{"comment":"/**\n* Initializes the i18n singleton table\n* @param {string} [customLocation] if given, defines the path (relative to app) for the i18n/ folder if\n* not the standard `i18n/` location.\n* @static\n*/","meta":{"range":[3240,3387],"filename":"i18n.js","lineno":88,"columnno":0,"path":"/src","code":{"id":"astnode100000330","name":"init","type":"FunctionDeclaration","paramnames":["customLocation"]},"vars":{"i18nFolder":"module:i18n~i18nFolder.i18nFolder","table":"module:i18n~table.table","installedLocales":"module:i18n~installedLocales.installedLocales"}},"description":"Initializes the i18n singleton table","params":[{"type":{"names":["string"]},"optional":true,"description":"if given, defines the path (relative to app) for the i18n/ folder if\nnot the standard `i18n/` location.","name":"customLocation"}],"scope":"static","name":"init","longname":"module:i18n.init","kind":"function","memberof":"module:i18n"},{"comment":"/**\n* Retrieves and reports the locale of the device\n* @returns {string}\n* @static\n*/","meta":{"range":[3479,3683],"filename":"i18n.js","lineno":100,"columnno":0,"path":"/src","code":{"id":"astnode100000352","name":"getSystemLocale","type":"FunctionDeclaration","paramnames":[]},"vars":{"systemLanguage":"module:i18n~systemLanguage.systemLanguage","systemRegion":"module:i18n~systemRegion.systemRegion"}},"description":"Retrieves and reports the locale of the device","returns":[{"type":{"names":["string"]}}],"scope":"static","name":"getSystemLocale","longname":"module:i18n.getSystemLocale","kind":"function","memberof":"module:i18n","params":[]},{"comment":"/**\n* Loads the table with the translation strings for the given locale from the i18n folder.\n* The i18n folder contains files that hold translation strings in a hierarchy in which\n* any strings in the 'common.json' file are loaded first. These strings are meant to be\n* common across languages and generally are used for default formats, etc.\n* Additionally, regardless of language, the region itself may have a set of common defaults.\n* This optional file is named `common-RG.json` where **RG** is replaced by the locale code.\n* For example, `common-US.json` would hold anything relevant to the US regardless of language, such\n* as currency formats or other civic or regionally specific patterns or configurations.  Generally not words, though,\n* since these are the domain of the language files.\n* Next, the core language file is loaded (eg. 'en.json').  This file contains the translation\n* strings for that language that is the default for all locales.\n* Next, the specific region is loaded (eg. 'en-GB.json') which will add or replace strings\n* with specific translations for the given region.\n*\n* @param {string} locale  A BP47 language/region code (eg. 'en-US' or 'fr-CA')\n* @returns {Promise}\n* @static\n*/","meta":{"range":[4918,5018],"filename":"i18n.js","lineno":125,"columnno":0,"path":"/src","code":{"id":"astnode100000387","name":"loadForLocale","type":"FunctionDeclaration","paramnames":["locale"]},"vars":{"":null}},"description":"Loads the table with the translation strings for the given locale from the i18n folder.\nThe i18n folder contains files that hold translation strings in a hierarchy in which\nany strings in the 'common.json' file are loaded first. These strings are meant to be\ncommon across languages and generally are used for default formats, etc.\nAdditionally, regardless of language, the region itself may have a set of common defaults.\nThis optional file is named `common-RG.json` where **RG** is replaced by the locale code.\nFor example, `common-US.json` would hold anything relevant to the US regardless of language, such\nas currency formats or other civic or regionally specific patterns or configurations.  Generally not words, though,\nsince these are the domain of the language files.\nNext, the core language file is loaded (eg. 'en.json').  This file contains the translation\nstrings for that language that is the default for all locales.\nNext, the specific region is loaded (eg. 'en-GB.json') which will add or replace strings\nwith specific translations for the given region.","params":[{"type":{"names":["string"]},"description":"A BP47 language/region code (eg. 'en-US' or 'fr-CA')","name":"locale"}],"returns":[{"type":{"names":["Promise"]}}],"scope":"static","name":"loadForLocale","longname":"module:i18n.loadForLocale","kind":"function","memberof":"module:i18n"},{"comment":"/**\n* Removes the named locale from storage when done using it.\n* Note: Will not remove the system locale\n* @param locale\n* @static\n*/","meta":{"range":[5160,5236],"filename":"i18n.js","lineno":137,"columnno":0,"path":"/src","code":{"id":"astnode100000405","name":"clearInstalledLocale","type":"FunctionDeclaration","paramnames":["locale"]}},"description":"Removes the named locale from storage when done using it.\nNote: Will not remove the system locale","params":[{"name":"locale"}],"scope":"static","name":"clearInstalledLocale","longname":"module:i18n.clearInstalledLocale","kind":"function","memberof":"module:i18n"},{"comment":"/**\n* Returns the list of locale tables currently held in memory.\n* @static\n*/","meta":{"range":[5320,5409],"filename":"i18n.js","lineno":145,"columnno":0,"path":"/src","code":{"id":"astnode100000414","name":"getInstalledLocales","type":"FunctionDeclaration","paramnames":[]}},"description":"Returns the list of locale tables currently held in memory.","scope":"static","name":"getInstalledLocales","longname":"module:i18n.getInstalledLocales","kind":"function","memberof":"module:i18n","params":[]},{"comment":"/**\n* Tests if the given locale is loaded\n* @static\n*/","meta":{"range":[5469,5559],"filename":"i18n.js","lineno":153,"columnno":0,"path":"/src","code":{"id":"astnode100000423","name":"isLocaleLoaded","type":"FunctionDeclaration","paramnames":["locale"]}},"description":"Tests if the given locale is loaded","scope":"static","name":"isLocaleLoaded","longname":"module:i18n.isLocaleLoaded","kind":"function","memberof":"module:i18n","params":[]},{"comment":"/**\n* Synchronous version of `loadForLocale`\n* @param locale\n* @static\n*/","meta":{"range":[5639,5717],"filename":"i18n.js","lineno":162,"columnno":0,"path":"/src","code":{"id":"astnode100000437","name":"loadForLocaleSync","type":"FunctionDeclaration","paramnames":["locale"]},"vars":{"table":"module:i18n~table.table"}},"description":"Synchronous version of `loadForLocale`","params":[{"name":"locale"}],"scope":"static","name":"loadForLocaleSync","longname":"module:i18n.loadForLocaleSync","kind":"function","memberof":"module:i18n"},{"comment":"","meta":{"range":[5719,6303],"filename":"i18n.js","lineno":166,"columnno":0,"path":"/src","code":{"id":"astnode100000447","name":"enumerateAvailableLanguagesAndRegions","type":"FunctionDeclaration","paramnames":[]},"vars":{"folder":"module:i18n~enumerateAvailableLanguagesAndRegions~folder","":null}},"undocumented":true,"name":"enumerateAvailableLanguagesAndRegions","longname":"module:i18n~enumerateAvailableLanguagesAndRegions","kind":"function","scope":"inner","memberof":"module:i18n","params":[]},{"comment":"/**\n* Returns the enumeration result of the i18n folder for the installed language codes.\n* First invocation will do the enumeration. Subsequent invocations read the cached results.\n*/","meta":{"range":[6493,6639],"filename":"i18n.js","lineno":191,"columnno":0,"path":"/src","code":{"id":"astnode100000566","name":"getAvailableLanguages","type":"FunctionDeclaration","paramnames":[]}},"description":"Returns the enumeration result of the i18n folder for the installed language codes.\nFirst invocation will do the enumeration. Subsequent invocations read the cached results.","name":"getAvailableLanguages","longname":"module:i18n~getAvailableLanguages","kind":"function","scope":"inner","memberof":"module:i18n","params":[]},{"comment":"/**\n* Returns all of the available countries for this language\n* First invocation will do the enumeration. Subsequent invocations read the cached results.\n* @param language\n* @returns {string[]}\n*/","meta":{"range":[6844,7068],"filename":"i18n.js","lineno":204,"columnno":0,"path":"/src","code":{"id":"astnode100000581","name":"getAvailableRegions","type":"FunctionDeclaration","paramnames":["language"]},"vars":{"all":"module:i18n~getAvailableRegions~all"}},"description":"Returns all of the available countries for this language\nFirst invocation will do the enumeration. Subsequent invocations read the cached results.","params":[{"name":"language"}],"returns":[{"type":{"names":["Array.<string>"]}}],"name":"getAvailableRegions","longname":"module:i18n~getAvailableRegions","kind":"function","scope":"inner","memberof":"module:i18n"},{"comment":"/**\n* Loads and returns a StringTable that is populated for use in i18n style conversions\n* but does NOT install is as the selected locale.\n*\n* @param locale\n* @returns {Promise<StringTable>}\n* @static\n*/","meta":{"range":[7282,8180],"filename":"i18n.js","lineno":220,"columnno":0,"path":"/src","code":{"id":"astnode100000613","name":"loadForeignTable","type":"FunctionDeclaration","paramnames":["locale"]},"vars":{"parts":"module:i18n.loadForeignTable~parts","lang":"module:i18n~lang","region":"module:i18n~region","ftable":"module:i18n.loadForeignTable~ftable","":null}},"description":"Loads and returns a StringTable that is populated for use in i18n style conversions\nbut does NOT install is as the selected locale.","params":[{"name":"locale"}],"returns":[{"type":{"names":["Promise.<StringTable>"]}}],"scope":"static","name":"loadForeignTable","longname":"module:i18n.loadForeignTable","kind":"function","memberof":"module:i18n"},{"comment":"","meta":{"range":[7462,7487],"filename":"i18n.js","lineno":225,"columnno":8,"path":"/src","code":{"id":"astnode100000639","name":"parts","type":"CallExpression","value":""}},"undocumented":true,"name":"parts","longname":"module:i18n.loadForeignTable~parts","kind":"constant","memberof":"module:i18n.loadForeignTable","scope":"inner","params":[]},{"comment":"","meta":{"range":[7678,7704],"filename":"i18n.js","lineno":234,"columnno":8,"path":"/src","code":{"id":"astnode100000685","name":"ftable","type":"NewExpression","value":""}},"undocumented":true,"name":"ftable","longname":"module:i18n.loadForeignTable~ftable","kind":"constant","memberof":"module:i18n.loadForeignTable","scope":"inner","params":[]},{"comment":"/**\n* Synchronously loads and returns a StringTable that is populated for use in i18n style conversions\n* but does NOT install is as the selected locale.\n\n* @param locale\n* @returns {StringTable}\n* @static\n*/","meta":{"range":[8397,9700],"filename":"i18n.js","lineno":256,"columnno":0,"path":"/src","code":{"id":"astnode100000765","name":"loadForeignTableSync","type":"FunctionDeclaration","paramnames":["locale"]},"vars":{"parts":"module:i18n.loadForeignTableSync~parts","lang":"module:i18n~lang","region":"module:i18n~region","ftable":"module:i18n.loadForeignTableSync~ftable","silent":"module:i18n.loadForeignTableSync~silent","installedLocales[undefined]":"module:i18n~installedLocales.undefined]"}},"description":"Synchronously loads and returns a StringTable that is populated for use in i18n style conversions\nbut does NOT install is as the selected locale.","params":[{"name":"locale"}],"returns":[{"type":{"names":["StringTable"]}}],"scope":"static","name":"loadForeignTableSync","longname":"module:i18n.loadForeignTableSync","kind":"function","memberof":"module:i18n"},{"comment":"// if (installedLocales[locale]) {\n//   return installedLocales[locale]\n// }","meta":{"range":[8588,8613],"filename":"i18n.js","lineno":261,"columnno":8,"path":"/src","code":{"id":"astnode100000778","name":"parts","type":"CallExpression","value":""}},"undocumented":true,"name":"parts","longname":"module:i18n.loadForeignTableSync~parts","kind":"constant","memberof":"module:i18n.loadForeignTableSync","scope":"inner","params":[]},{"comment":"","meta":{"range":[8804,8830],"filename":"i18n.js","lineno":270,"columnno":8,"path":"/src","code":{"id":"astnode100000824","name":"ftable","type":"NewExpression","value":""}},"undocumented":true,"name":"ftable","longname":"module:i18n.loadForeignTableSync~ftable","kind":"constant","memberof":"module:i18n.loadForeignTableSync","scope":"inner","params":[]},{"comment":"","meta":{"range":[8839,8853],"filename":"i18n.js","lineno":271,"columnno":8,"path":"/src","code":{"id":"astnode100000829","name":"silent","type":"Literal","value":false}},"undocumented":true,"name":"silent","longname":"module:i18n.loadForeignTableSync~silent","kind":"constant","memberof":"module:i18n.loadForeignTableSync","scope":"inner","params":[]},{"comment":"/**\n* Returns true if the table contains a translation for the given string id\n*\n* @param id\n* @returns {boolean}\n* @static\n*/","meta":{"range":[9835,9987],"filename":"i18n.js","lineno":291,"columnno":0,"path":"/src","code":{"id":"astnode100000888","name":"hasLocaleString","type":"FunctionDeclaration","paramnames":["id"]}},"description":"Returns true if the table contains a translation for the given string id","params":[{"name":"id"}],"returns":[{"type":{"names":["boolean"]}}],"scope":"static","name":"hasLocaleString","longname":"module:i18n.hasLocaleString","kind":"function","memberof":"module:i18n"},{"comment":"/**\n* Returns the translated string for the given id, if it exists.\n* If it does not exist, and useDefault has been passed, this default value is returned instead.\n* If useDefault is not passed, the returned value will be the id decorated with a prefix of \"%$>\" and a\n* suffix of \"<$%\".  This may be helpful in recognizing omissions in the string table during development.\n*\n* If the string does not exist in the table, it will be logged to the console\n*\n* @param {string} id  The string id to look up\n* @param {string} [useDefault] If given, will be the default value if the id does not exist in the table\n* @param {boolean} [silent] If given as true, will prevent console logging of use of default.\n* @static\n*/","meta":{"range":[10715,11100],"filename":"i18n.js","lineno":309,"columnno":0,"path":"/src","code":{"id":"astnode100000907","name":"getLocaleString","type":"FunctionDeclaration","paramnames":["id","useDefault","silent"]},"vars":{"rt":"module:i18n~rt"}},"description":"Returns the translated string for the given id, if it exists.\nIf it does not exist, and useDefault has been passed, this default value is returned instead.\nIf useDefault is not passed, the returned value will be the id decorated with a prefix of \"%$>\" and a\nsuffix of \"<$%\".  This may be helpful in recognizing omissions in the string table during development.\n\nIf the string does not exist in the table, it will be logged to the console","params":[{"type":{"names":["string"]},"description":"The string id to look up","name":"id"},{"type":{"names":["string"]},"optional":true,"description":"If given, will be the default value if the id does not exist in the table","name":"useDefault"},{"type":{"names":["boolean"]},"optional":true,"description":"If given as true, will prevent console logging of use of default.","name":"silent"}],"scope":"static","name":"getLocaleString","longname":"module:i18n.getLocaleString","kind":"function","memberof":"module:i18n"},{"comment":"/**\n* Traverses the object (deep by default, or without recursion if `shallow` is true)\n* looking for string properties that begin with '@'.  These strings are parsed\n* as `@token:default`, meaning that the substring following the '@' character for the\n* remainder of the string or to the first occurrence of a ':' character is used as\n* a token into the locale string table.  If there is a : character in the string, the\n* substring following this is used as the default if the string table does not have\n* the token entry.\n* This is effectively equivalent to `getLocalString(token, default)` for the strings\n* converted.  This method is a convenient means of translating many strings at once\n* and for populating objects with values that include localizable string data.\n*\n* Note that this version translates in place, without a return object.\n* This makes it unsuitable for re-translation, but useful for passing functional objects.\n*\n* @param {object} obj  Object to be traversed for '@token' and '@token:default' patterns.\n* @param {boolean} [shallow] Optional; if true recursion is prohibited\n* @static\n*/","meta":{"range":[12232,12731],"filename":"i18n.js","lineno":338,"columnno":0,"path":"/src","code":{"id":"astnode100000965","name":"populateObjectStrings","type":"FunctionDeclaration","paramnames":["obj","shallow"]},"vars":{"":null}},"description":"Traverses the object (deep by default, or without recursion if `shallow` is true)\nlooking for string properties that begin with '@'.  These strings are parsed\nas `@token:default`, meaning that the substring following the '@' character for the\nremainder of the string or to the first occurrence of a ':' character is used as\na token into the locale string table.  If there is a : character in the string, the\nsubstring following this is used as the default if the string table does not have\nthe token entry.\nThis is effectively equivalent to `getLocalString(token, default)` for the strings\nconverted.  This method is a convenient means of translating many strings at once\nand for populating objects with values that include localizable string data.\n\nNote that this version translates in place, without a return object.\nThis makes it unsuitable for re-translation, but useful for passing functional objects.","params":[{"type":{"names":["object"]},"description":"Object to be traversed for '@token' and '@token:default' patterns.","name":"obj"},{"type":{"names":["boolean"]},"optional":true,"description":"Optional; if true recursion is prohibited","name":"shallow"}],"scope":"static","name":"populateObjectStrings","longname":"module:i18n.populateObjectStrings","kind":"function","memberof":"module:i18n"},{"comment":"/**\n* Preferred method of translating a set of strings.\n* See `populateObjectStrings` for general description.\n* _However_: This makes a __COPY__ of the passed-in object with the translated values.\n* This allows the original to be used for re-translation more easily.\n*\n* @param obj\n* @param shallow\n* @return {object} Resulting object with translated strings.\n*/","meta":{"range":[13106,13738],"filename":"i18n.js","lineno":365,"columnno":0,"path":"/src","code":{"id":"astnode100001070","name":"translateObjectStrings","type":"FunctionDeclaration","paramnames":["obj","shallow"]},"vars":{"outObj":"module:i18n~translateObjectStrings~outObj","":null}},"description":"Preferred method of translating a set of strings.\nSee `populateObjectStrings` for general description.\n_However_: This makes a __COPY__ of the passed-in object with the translated values.\nThis allows the original to be used for re-translation more easily.","params":[{"name":"obj"},{"name":"shallow"}],"returns":[{"type":{"names":["object"]},"description":"Resulting object with translated strings."}],"name":"translateObjectStrings","longname":"module:i18n~translateObjectStrings","kind":"function","scope":"inner","memberof":"module:i18n"},{"comment":"/**\n* Provides pluralization support.\n*\n* In English, pluralization is pretty simple: You either have a singular or a plural.\n*\n* The string tables alone could be used here: Lookup word.plural for counts != 1 and make sure the\n* table has the correct entries (e.g. 'dog' and 'dogs', 'sheep' and 'sheep', 'ox' and 'oxen')\n*\n* Further, we could eliminate the need for too many duplicates by adding rules (i.e. append 's' by default)\n* that are overridden if there is a string table '.plural' entry.\n*\n* Other languages are not so simple.  See discussion online for this topic in detail.\n* For example, Russian (and other languages) support multiple forms of pluralized words for common items depending\n* upon the count.  There may be a different name for a 'few' things than for 'many'.  Or for 'zero'. Or when\n* fractional amounts are involved.  Some languages use different wording for counts with 1 as the last digit.\n* And so it goes.  Using tables with suffixes will work for all of these, but one must prepare.\n*\n* The W3C intl spec for `PluralRules` and its `select` method support the following plural results:\n*  'one', 'two', 'few', 'many' and 'other', (where other is synonymous with 'plural' by default).\n*\n* This in turn should be used to look up the corresponding correct word form in the i18n table.\n*\n* The i18n table for the language / locale must contain the word referenced in singular form and\n* *may also* require the pluralized form(s) as needed (per language).\n*\n* The pluralized form of the word is held in an id that is the same as the singular word identifier\n* plus a suffix (e.g. '.plural').  For example:\n*\n*  ```\n*  \"item.cow\" : \"cow\",\n*  \"item.cow.plural\" : \"cows\",\n*  \"item.sheep\": \"sheep\",\n*  \"item.sheep.plural\" : \"sheep\"\n*  ```\n*\n*  in other languages (or for ordinal support), one may use the other suffixes of\n*  \".two\", \".few\", \".many\" or \"plural\"\n*\n* Note that these map directly to the terminology of the\n* W3C PluralRules specification, but with these exceptions:\n*  - The PluralRules 'one' is not used.  The \"no-suffix\" original identifier is used.\n*  - The PluralRules 'other' is changed to 'plural' as the suffix (more semantically aligned to english at least).\n*\n* Note that \"simple plurals\" need not be literally provided in the table if the plurization script can assign\n* pluralization correctly.  For instance, in the above example, \"item.cow\" need not have a literal\n* \"item.cow.plural\" compliment, since the word \"cow\" can be automatically pluralized to \"cows\" correctly.\n* However, \"item.sheep\" will probably need the literal entry to prevent the algorithm from naming it as \"sheeps\".\n*\n* Automatic pluralization is the domain of the `findPlurals` method.  The `plural-en.js` script provided\n* supplies the simple version for English, and handles appended \"s\" or \"es\" in most common cases, but does\n* not handle exceptions (so use literals when in doubt).\n*\n* The `getPluralizedString` method encapsulates this into a single place.  However, it requires proper setup\n* to be usefule.\n*\n* It relies upon application-supplied code within the `i18n` folder.\n* This code is within a script named for the language, as in `plurals-en.js` for the `en` language.\n*\n* This script may supply each of two methods.  These are optional, and default behavior will occur if not defined.\n*\n* - __`getPluralRulesSelect`__ takes two arguments\n*  - `count` The number of items\n*  - `type` [optional] is one of 'cardinal' or 'ordinal'. 'cardinal' is the default. 'ordinal' is *not yet* supported here.  See the PluralRules definitions of these.\n* The function should return per `PluralRules.select` for this language.\n* It may choose to implement directly as a pass through to `intl.PluralRules` if this is available.\n* It must return one of 'one', 'two', 'few', 'many', or 'other' accordingly.\n* Note that for English, the allowed returns (for type 'cardinal') are 'one' and 'other'.\n* (future support for 'ordinal' in English will define the other return values per intl spec)\n*\n* - __`findPlural`__ takes three arguments\n*  - `single` The word in singular form\n*  - `count` The count to pluralize to\n*  - `type` Optional. 'cardinal' is the default. 'ordinal' is not yet supported.\n* The function should return the pluralized version of the word in that form, either by rule or\n* internal lookup, or else return null.\n*\n* - If the plural rule script is not available, the `intl.PluralRules` method will be used directly to\n* get the correct plural suffixed string from the i18n table.\n*\n* - If neither of these support features are available, all requests will return a string \"%$<NO PLURALS lang >$%\"\n* (where *lang* is the language requested).\n*\n*\n* Note: future support for 'ordinal' and support for passed-in locale may be added later\n*\n* @param {string} stringId The i18n string identifier for the singular form of the word to pluralize\n* @param {number} count\n* @param {string} [type]   default is 'cardinal'.  'ordinal' is *not yet* supported here.\n* @returns {string}\n* @static\n*/","meta":{"range":[18851,20311],"filename":"i18n.js","lineno":479,"columnno":0,"path":"/src","code":{"id":"astnode100001203","name":"getPluralizedString","type":"FunctionDeclaration","paramnames":["stringId","count","type"]},"vars":{"locale":"module:i18n.getPluralizedString~locale","prSelect":"module:i18n~prSelect","lang":"module:i18n.getPluralizedString~lang","ruleScript":"module:i18n.getPluralizedString~ruleScript","rules":"module:i18n~rules","single":"module:i18n.getPluralizedString~single","prId":"module:i18n.getPluralizedString~prId","pl":"module:i18n.getPluralizedString~pl"}},"description":"Provides pluralization support.\n\nIn English, pluralization is pretty simple: You either have a singular or a plural.\n\nThe string tables alone could be used here: Lookup word.plural for counts != 1 and make sure the\ntable has the correct entries (e.g. 'dog' and 'dogs', 'sheep' and 'sheep', 'ox' and 'oxen')\n\nFurther, we could eliminate the need for too many duplicates by adding rules (i.e. append 's' by default)\nthat are overridden if there is a string table '.plural' entry.\n\nOther languages are not so simple.  See discussion online for this topic in detail.\nFor example, Russian (and other languages) support multiple forms of pluralized words for common items depending\nupon the count.  There may be a different name for a 'few' things than for 'many'.  Or for 'zero'. Or when\nfractional amounts are involved.  Some languages use different wording for counts with 1 as the last digit.\nAnd so it goes.  Using tables with suffixes will work for all of these, but one must prepare.\n\nThe W3C intl spec for `PluralRules` and its `select` method support the following plural results:\n 'one', 'two', 'few', 'many' and 'other', (where other is synonymous with 'plural' by default).\n\nThis in turn should be used to look up the corresponding correct word form in the i18n table.\n\nThe i18n table for the language / locale must contain the word referenced in singular form and\n*may also* require the pluralized form(s) as needed (per language).\n\nThe pluralized form of the word is held in an id that is the same as the singular word identifier\nplus a suffix (e.g. '.plural').  For example:\n\n ```\n \"item.cow\" : \"cow\",\n \"item.cow.plural\" : \"cows\",\n \"item.sheep\": \"sheep\",\n \"item.sheep.plural\" : \"sheep\"\n ```\n\n in other languages (or for ordinal support), one may use the other suffixes of\n \".two\", \".few\", \".many\" or \"plural\"\n\nNote that these map directly to the terminology of the\nW3C PluralRules specification, but with these exceptions:\n - The PluralRules 'one' is not used.  The \"no-suffix\" original identifier is used.\n - The PluralRules 'other' is changed to 'plural' as the suffix (more semantically aligned to english at least).\n\nNote that \"simple plurals\" need not be literally provided in the table if the plurization script can assign\npluralization correctly.  For instance, in the above example, \"item.cow\" need not have a literal\n\"item.cow.plural\" compliment, since the word \"cow\" can be automatically pluralized to \"cows\" correctly.\nHowever, \"item.sheep\" will probably need the literal entry to prevent the algorithm from naming it as \"sheeps\".\n\nAutomatic pluralization is the domain of the `findPlurals` method.  The `plural-en.js` script provided\nsupplies the simple version for English, and handles appended \"s\" or \"es\" in most common cases, but does\nnot handle exceptions (so use literals when in doubt).\n\nThe `getPluralizedString` method encapsulates this into a single place.  However, it requires proper setup\nto be usefule.\n\nIt relies upon application-supplied code within the `i18n` folder.\nThis code is within a script named for the language, as in `plurals-en.js` for the `en` language.\n\nThis script may supply each of two methods.  These are optional, and default behavior will occur if not defined.\n\n- __`getPluralRulesSelect`__ takes two arguments\n - `count` The number of items\n - `type` [optional] is one of 'cardinal' or 'ordinal'. 'cardinal' is the default. 'ordinal' is *not yet* supported here.  See the PluralRules definitions of these.\nThe function should return per `PluralRules.select` for this language.\nIt may choose to implement directly as a pass through to `intl.PluralRules` if this is available.\nIt must return one of 'one', 'two', 'few', 'many', or 'other' accordingly.\nNote that for English, the allowed returns (for type 'cardinal') are 'one' and 'other'.\n(future support for 'ordinal' in English will define the other return values per intl spec)\n\n- __`findPlural`__ takes three arguments\n - `single` The word in singular form\n - `count` The count to pluralize to\n - `type` Optional. 'cardinal' is the default. 'ordinal' is not yet supported.\nThe function should return the pluralized version of the word in that form, either by rule or\ninternal lookup, or else return null.\n\n- If the plural rule script is not available, the `intl.PluralRules` method will be used directly to\nget the correct plural suffixed string from the i18n table.\n\n- If neither of these support features are available, all requests will return a string \"%$<NO PLURALS lang >$%\"\n(where *lang* is the language requested).\n\n\nNote: future support for 'ordinal' and support for passed-in locale may be added later","params":[{"type":{"names":["string"]},"description":"The i18n string identifier for the singular form of the word to pluralize","name":"stringId"},{"type":{"names":["number"]},"name":"count"},{"type":{"names":["string"]},"optional":true,"description":"default is 'cardinal'.  'ordinal' is *not yet* supported here.","name":"type","defaultvalue":"cardinal"}],"returns":[{"type":{"names":["string"]}}],"scope":"static","name":"getPluralizedString","longname":"module:i18n.getPluralizedString","kind":"function","memberof":"module:i18n"}]}